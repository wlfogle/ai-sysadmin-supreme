#!/usr/bin/env python3
"""
The Walking Dead Universe Suite - Main Launcher
===============================================
Launch both the webisode downloader and chronological watchlist.

🧟‍♂️ Complete TWD Experience:
• 📱 Webisode Downloader with alternative sources
• 📺 Chronological watchlist with perfect integration
• 🎯 354+ episodes in perfect timeline order

Author: AI Assistant
Date: 2025-08-30
License: MIT
"""

import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import sys
from pathlib import Path
import threading

class TWDSuiteLauncher:
    """Main launcher for The Walking Dead suite of tools"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("🧟‍♂️ The Walking Dead Universe - Complete Suite")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # Set window icon (if available)
        try:
            # You could add an icon file here
            pass
        except:
            pass
        
        self.create_widgets()
        
    def create_widgets(self):
        """Create and layout GUI widgets"""
        # Main frame with padding
        main_frame = ttk.Frame(self.root, padding="30")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        
        # Header section\n        header_frame = ttk.Frame(main_frame)\n        header_frame.grid(row=0, column=0, pady=(0, 30))\n        \n        # Main title\n        title_label = ttk.Label(header_frame, \n                               text=\"🧟‍♂️ The Walking Dead Universe\", \n                               font=('Arial', 24, 'bold'))\n        title_label.pack(pady=(0, 5))\n        \n        # Subtitle\n        subtitle_label = ttk.Label(header_frame,\n                                  text=\"Complete Suite for Webisodes & Chronological Viewing\",\n                                  font=('Arial', 14))\n        subtitle_label.pack(pady=(0, 10))\n        \n        # Feature highlights\n        features_text = \"🎯 354+ Episodes | 📅 12+ Years Timeline | 🔗 All Webisodes | 📱 Alternative Sources\"\n        features_label = ttk.Label(header_frame, text=features_text, font=('Arial', 11, 'italic'))\n        features_label.pack()\n        \n        # Tools section\n        tools_frame = ttk.LabelFrame(main_frame, text=\"Available Tools\", padding=\"20\")\n        tools_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 20))\n        tools_frame.columnconfigure(0, weight=1)\n        tools_frame.columnconfigure(1, weight=1)\n        \n        # Webisode Downloader card\n        downloader_card = ttk.Frame(tools_frame, relief=\"raised\", padding=\"20\")\n        downloader_card.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))\n        \n        ttk.Label(downloader_card, text=\"📱 Webisode Downloader\", font=('Arial', 16, 'bold')).pack(pady=(0, 10))\n        \n        downloader_features = [\n            \"✅ Download all 58 TWD webisodes\",\n            \"🌐 Internet Archive priority search\", \n            \"🔄 Exponential backoff retry system\",\n            \"📊 Real-time progress tracking\",\n            \"🎯 Chronologically numbered episodes\"\n        ]\n        \n        for feature in downloader_features:\n            ttk.Label(downloader_card, text=feature, font=('Arial', 10)).pack(anchor=tk.W, pady=1)\n        \n        ttk.Button(downloader_card, text=\"🚀 Launch Downloader\", \n                  command=self.launch_downloader,\n                  style=\"Accent.TButton\").pack(pady=(15, 0))\n        \n        # Watchlist card\n        watchlist_card = ttk.Frame(tools_frame, relief=\"raised\", padding=\"20\")\n        watchlist_card.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))\n        \n        ttk.Label(watchlist_card, text=\"📺 Chronological Watchlist\", font=('Arial', 16, 'bold')).pack(pady=(0, 10))\n        \n        watchlist_features = [\n            \"🎯 Perfect chronological order\",\n            \"📅 All webisodes integrated precisely\",\n            \"⭐ Importance ratings (Critical/Important)\",\n            \"🔍 Filterable by series & importance\", \n            \"📊 Export & statistics features\"\n        ]\n        \n        for feature in watchlist_features:\n            ttk.Label(watchlist_card, text=feature, font=('Arial', 10)).pack(anchor=tk.W, pady=1)\n        \n        ttk.Button(watchlist_card, text=\"📋 View Watchlist\", \n                  command=self.launch_watchlist,\n                  style=\"Accent.TButton\").pack(pady=(15, 0))\n        \n        # Quick actions section\n        actions_frame = ttk.LabelFrame(main_frame, text=\"Quick Actions\", padding=\"15\")\n        actions_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, 20))\n        \n        actions_buttons = ttk.Frame(actions_frame)\n        actions_buttons.pack()\n        \n        ttk.Button(actions_buttons, text=\"🧪 Test Dependencies\", \n                  command=self.test_dependencies).pack(side=tk.LEFT, padx=(0, 10))\n        ttk.Button(actions_buttons, text=\"📂 Open Downloads Folder\", \n                  command=self.open_downloads_folder).pack(side=tk.LEFT, padx=(0, 10))\n        ttk.Button(actions_buttons, text=\"📋 Export Watchlist\", \n                  command=self.quick_export_watchlist).pack(side=tk.LEFT)\n        \n        # Information section\n        info_frame = ttk.LabelFrame(main_frame, text=\"Information\", padding=\"15\")\n        info_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, 20))\n        \n        info_text = \"\"\"🎬 The Complete TWD Experience:\n\n• This suite provides everything you need for the ultimate Walking Dead viewing experience\n• Download webisodes with intelligent fallback to alternative sources when primary sources fail\n• View the perfect chronological order integrating all webisodes at their exact timeline moments\n• Filter by importance to focus on critical episodes or explore optional content\n• Export your personalized watchlist for offline reference\n\n📋 Viewing Order Tips:\n• Start with \"Critical\" episodes for the core story\n• Add \"Important\" episodes for enhanced character development\n• Include webisodes for complete timeline understanding\n• Use chronological order for the most immersive experience\"\"\"\n        \n        info_label = ttk.Label(info_frame, text=info_text, font=('Arial', 10), justify=tk.LEFT)\n        info_label.pack(anchor=tk.W)\n        \n        # Status bar\n        self.status_var = tk.StringVar(value=\"Ready - Select a tool to get started!\")\n        status_frame = ttk.Frame(main_frame)\n        status_frame.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=(10, 0))\n        \n        ttk.Label(status_frame, textvariable=self.status_var, font=('Arial', 10, 'italic')).pack(side=tk.LEFT)\n        \n        # Version info\n        ttk.Label(status_frame, text=\"v1.0 - Enhanced Edition\", \n                 font=('Arial', 9)).pack(side=tk.RIGHT)\n    \n    def launch_downloader(self):\n        \"\"\"Launch the webisode downloader\"\"\"\n        self.status_var.set(\"Launching webisode downloader...\")\n        self.root.update()\n        \n        try:\n            script_path = Path(__file__).parent / \"twd_webisodes_gui.py\"\n            if script_path.exists():\n                # Launch in a separate thread to avoid blocking\n                threading.Thread(target=lambda: subprocess.run([sys.executable, str(script_path)]), \n                               daemon=True).start()\n                self.status_var.set(\"Webisode downloader launched!\")\n            else:\n                messagebox.showerror(\"Error\", \"Webisode downloader not found!\\nMake sure twd_webisodes_gui.py is in the same directory.\")\n                self.status_var.set(\"Error: Downloader not found\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to launch downloader: {e}\")\n            self.status_var.set(\"Error launching downloader\")\n    \n    def launch_watchlist(self):\n        \"\"\"Launch the chronological watchlist\"\"\"\n        self.status_var.set(\"Launching chronological watchlist...\")\n        self.root.update()\n        \n        try:\n            script_path = Path(__file__).parent / \"twd_chronological_watchlist.py\"\n            if script_path.exists():\n                # Launch in a separate thread\n                threading.Thread(target=lambda: subprocess.run([sys.executable, str(script_path)]), \n                               daemon=True).start()\n                self.status_var.set(\"Chronological watchlist launched!\")\n            else:\n                messagebox.showerror(\"Error\", \"Chronological watchlist not found!\\nMake sure twd_chronological_watchlist.py is in the same directory.\")\n                self.status_var.set(\"Error: Watchlist not found\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to launch watchlist: {e}\")\n            self.status_var.set(\"Error launching watchlist\")\n    \n    def test_dependencies(self):\n        \"\"\"Test system dependencies\"\"\"\n        self.status_var.set(\"Testing dependencies...\")\n        self.root.update()\n        \n        try:\n            script_path = Path(__file__).parent / \"test_twd_downloader.py\"\n            if script_path.exists():\n                # Launch test in a separate thread\n                threading.Thread(target=lambda: subprocess.run([sys.executable, str(script_path)]), \n                               daemon=True).start()\n                self.status_var.set(\"Dependency test launched!\")\n            else:\n                messagebox.showwarning(\"Warning\", \"Dependency test script not found.\\nPlease ensure all required packages are installed:\\n\\npip install yt-dlp requests\\nsudo pacman -S tk  # (or appropriate for your system)\")\n                self.status_var.set(\"Test script not found\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to run dependency test: {e}\")\n            self.status_var.set(\"Error running test\")\n    \n    def open_downloads_folder(self):\n        \"\"\"Open the default downloads folder\"\"\"\n        downloads_path = Path(\"/mnt/media/systembackup/Videos/twd\")\n        \n        try:\n            # Create folder if it doesn't exist\n            downloads_path.mkdir(parents=True, exist_ok=True)\n            \n            # Open with system file manager\n            subprocess.run([\"xdg-open\", str(downloads_path)], check=True)\n            self.status_var.set(f\"Opened downloads folder: {downloads_path}\")\n        except subprocess.CalledProcessError:\n            # Fallback for systems without xdg-open\n            try:\n                subprocess.run([\"nautilus\", str(downloads_path)], check=True)\n                self.status_var.set(f\"Opened downloads folder: {downloads_path}\")\n            except:\n                messagebox.showinfo(\"Downloads Folder\", f\"Downloads folder location:\\n{downloads_path}\\n\\nPlease open this folder manually in your file manager.\")\n                self.status_var.set(\"Downloads folder location shown\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Could not open downloads folder: {e}\")\n            self.status_var.set(\"Error opening downloads folder\")\n    \n    def quick_export_watchlist(self):\n        \"\"\"Quick export of watchlist without launching full GUI\"\"\"\n        self.status_var.set(\"Exporting watchlist...\")\n        self.root.update()\n        \n        try:\n            # Import the watchlist module and create a quick export\n            import importlib.util\n            \n            script_path = Path(__file__).parent / \"twd_chronological_watchlist.py\"\n            if not script_path.exists():\n                messagebox.showerror(\"Error\", \"Watchlist script not found!\")\n                return\n            \n            spec = importlib.util.spec_from_file_location(\"twd_watchlist\", script_path)\n            twd_watchlist = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(twd_watchlist)\n            \n            # Create a temporary GUI instance to export\n            temp_root = tk.Tk()\n            temp_root.withdraw()  # Hide the window\n            \n            app = twd_watchlist.TWDWatchlistGUI(temp_root)\n            app.export_watchlist()\n            \n            temp_root.destroy()\n            \n            self.status_var.set(\"Watchlist exported successfully!\")\n            \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to export watchlist: {e}\")\n            self.status_var.set(\"Error exporting watchlist\")\n\ndef main():\n    \"\"\"Main function to run the launcher\"\"\"\n    root = tk.Tk()\n    \n    # Configure the style for better appearance\n    style = ttk.Style()\n    \n    # Try to set a modern theme\n    available_themes = style.theme_names()\n    if 'clam' in available_themes:\n        style.theme_use('clam')\n    elif 'alt' in available_themes:\n        style.theme_use('alt')\n    \n    app = TWDSuiteLauncher(root)\n    \n    try:\n        root.mainloop()\n    except KeyboardInterrupt:\n        print(\"\\n🛑 Application interrupted by user\")\n    except Exception as e:\n        messagebox.showerror(\"Error\", f\"Application error: {e}\")\n\nif __name__ == \"__main__\":\n    main()
